<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="deployment.html">

  &project;

  <properties>
    <author email="craigmcc@apache.org">크레이그 R. 맥클라나한</author>
    <title>배포</title>
  </properties>

<body>

<section name="컨텐트 테이블">
<toc/>
</section>

<section name="배경">

<p> 소스 코드 디렉토리를 어떻게 구조화시키는지 설명하기 전에, 
    웹 어플리케이션의 실행 구조를 검사하는 것은 매우 유용합니다.
    서블릿 버전 2.2 이전의 API 명세서에서는, 서버 플랫폼 간의 
    작은 일관성이 있었습니다. 그러나, 2.2(그 이후)를 따르는 
    명세서에서는 아래에 설명되어 있는 
    표준 형식의 <em>웹 어플리케이션 파일 목록</em>에 동의하는 
    것을 요구하고 있습니다.</p>

<p> 웹 어플리케이션은 표준 형식에 맞춰진 디렉토리및 파일의 계층 구조로 정의됩니다.
    이러한 계층구조는 파일시스템에 따로 따로 정의된 파일이나 디렉토리 같은 '압축'되지 
    않은 것이나, 웹 압축파일이나 WAR 파일같은 알려진 "압축"에 접근할 수 있습니다.
    The former format
    이전 형식은 개발할 때 좀 더 유리하며, 반면에 후자의 것은 
    당신의 어플리케이션을 설치하도록 하기 위해 배포할 때 유리합니다.
    </p>

<p> 당신의 웹 어플리케이션 계층에서 상위의 디렉토리는 웹 어플리케이션의 
    <em>document root</em>가 됩니다. 당신은 웹 어플리케이션의 유저 인터페이스를 
    구성하는 HTML 파일이나 JSP 파일을 넣게 될 것 입니다.  당신의 웹 어플리케이션 계층에서 상위의 디렉토리는 웹 어플리케이션의 
    <em>document root</em>가 됩니다. 당신은 웹 어플리케이션의 유저 인터페이스를 
    구성하는 HTML 파일이나 JSP 파일을 넣게 될 것 입니다.  시스템 관리자가 당신의 
    어플리케이션을 특별한 서버에 배포한다면, 그나 그들은 당신의 
    <em>context path</em>을 할당하게 됩니다.(다음 문단에서 톰캣에 배포하기 위한 메뉴얼이 정의되어 있습니다).   
    그러므로, 만약 시스템 관리자가 당신의 어플리케이션은 context path<code>/catalog</code>에 할당한다면, 
    <code>/catalog/index.html</code>를 참조한 요청 URI는
    document root에 있는 <code>index.html</code> 파일을 검색할 것 입니다..</p>

</section>


<section name="표준 디렉토리 형식">

<p> 필요한 형식의 웹 응용 프로그램 압축파일을 생성하는 것을 촉진시키기 위해서는 
    웹 어플리케이션의 "실행가능한" 파일을 준비하는 것이 편리합니다. (그것은 톰켓이 당신의 어플리케이션을 
    실행시킬 때 실제로 사용하는 파일입니다.) 같은 조직화가 WAR 포멧 자체를 위해서 요구됩니다.
    이렇게 하기 위해서는, 당신은 아래의 설명을 당신의 어플리케이션의 "Document root"에 끝내야 합니다.</p>
<ul>
<li><strong>*.html, *.jsp, etc.</strong> - HTML, JSP 그 외 
    파일(자바 스크립트, 스타일 시트 파일, 이미지)들은 당신의 
    어플리케이션을 위해 사용자의 브라우저에 반드시 보여져야 합니다.
    커다란 어플리케이션에서는 하위 디렉토리 구조에 그 파일들을 나누는 것을 선택할 수 있지만, 
    작은 앱에서는 주로 그 파일들을 하나의 디렉토리로 유지시키는 것이 훨씬 간단합니다.
    <br/><br/></li>
<li><strong>/WEB-INF/web.xml</strong> -  당신의 어플리케이션의 
    <em>웹 어플리케이션 배포 서술자</em>입니다.  이 XML파일은 당신 어플리케이션을 구성하는 
    서블릿과 다른 컴포넌트들과 당신의 서버에서 시행되기를 원하는 컨테이너 관리 보안 제약을 구성하고 있습니다..
    이 파일에 대해서 자세한 설명은 아래의 문단에서 설명하고 있습니다.
    <br/><br/></li>
<li><strong>/WEB-INF/classes/</strong> - 이 디렉토리는 당신의 어플리케이션에서 요구하는, 
    서블릿이나 서블리이 아닌, jar파일에 결합되어있지 않은 
    자바클래스 파일(또는 관계되어 있는 자원)을 포함하고 있습니다.  
    If your classes are organized into Java packages,
    만약 당신의 클래스들이 자바 패키지로 조직되어 있다면, 반드시 <code>/WEB-INF/classes/</code>아래의 
    디렉토리 구조에 이것을 반영해야 합니다.  예를 들어, <code>com.mycompany.mypackage.MyServlet</code>으로 
    이름이 지어진 자바 클래스는 <code>/WEB-INF/classes/com/mycompany/mypackage/MyServlet.class</code>와 같은 
    파일이름으로 저장되어져야 합니다.
    <br/><br/></li>
<li><strong>/WEB-INF/lib/</strong> - 이 디렉토리는 당신 어플리케이션에서 필요한, 서드 파티 클래스 라이브러리나 ]
    JDBC 드라이버 같은 자바 클래스 파일(또는 관련된 자원)을 
    가지고 있는 JAR 파일을 포함합니다.</li>
</ul>

<p> 톰캣(또는 다른 2.2/2.3 호환 서버) 안에 어플리케이션을 설치할 때, 클래스들은 <code>WEB-INF/classes/</code> 디렉토리 안에 
    있습니다. 뿐만 아니라 특정 웹 어플리케이션에서 다른 클래스에게 표시되는, JAR 파일안의 
    모든 클래스들은 <code>WEB-INF/lib/</code>에서 찾을 수 있습니다. 그러므로, 만약 당신이 이러한 위치중의 하나의 라이브러리 
    클래스를 모두 포함하는 경우, 
    (재배포 권리를 위해 당신이 활용했던 다른 서드 파티 라이브러리의 라이센스들을 체크해야 합니다.), 당신은 간단하게 
    웹 어플리케이션의 설치를 간단히 힐 수 있습니다. --
    시스템 클래스 패스 조정(또는 서버에 있는 전역 라이브러리 설치)이 필요없을 겁니다..</p>

<p> 여기의 대부분의 정보는 서블릿 버전 2.3 API 명세서에서 추출하였습니다. 
    더 많은 정보를 원하시면 그것을 보셔야 합니다.</p>

</section>


<section name="공유 라이브러리 파일">

<p> 대부분의 서블릿 컨네이너와 마찬가지로, Tomcat also supports mechanisms to install
library JAR files (or unpacked classes) once, and make them visible to all
installed web applications (without having to be included inside the web
application itself.  The details of how Tomcat locates and shares such
classes are described in the
<a href="../class-loader-howto.html">Class Loader HOW-TO</a> documentation.
The location commonly used within a Tomcat installation for shared code is
<strong>$CATALINA_HOME/lib</strong>. JAR files placed here are visible both to
web applications and internal Tomcat code. This is a good place to put JDBC
drivers that are required for both your application or internal Tomcat use
(such as for a JDBCRealm).</p>

<p>Out of the box, a standard Tomcat installation includes a variety
of pre-installed shared library files, including:</p>
<ul>
<li>The <em>Servlet 3.0</em> and <em>JSP 2.1</em> APIs that are fundamental
    to writing servlets and JavaServer Pages.<br/><br/></li>
<li>An <em>XML Parser</em> compliant with the JAXP (version 1.2) APIs, so
    your application can perform DOM-based or SAX-based processing of
    XML documents.<br/><br/></li>
</ul>

</section>


<section name="Web Application Deployment Descriptor">

<p>As mentioned above, the <code>/WEB-INF/web.xml</code> file contains the
Web Application Deployment Descriptor for your application.  As the filename
extension implies, this file is an XML document, and defines everything about
your application that a server needs to know (except the <em>context path</em>,
which is assigned by the system administrator when the application is
deployed).</p>

<p>The complete syntax and semantics for the deployment descriptor is defined
in Chapter 13 of the Servlet API Specification, version 2.3.  Over time, it
is expected that development tools will be provided that create and edit the
deployment descriptor for you.  In the meantime, to provide a starting point,
a <a href="web.xml.txt" target="_new">basic web.xml file</a>
is provided.  This file includes comments that describe the purpose of each
included element.</p>

<p><strong>NOTE</strong> - The Servlet Specification includes a Document
Type Descriptor (DTD) for the web application deployment descriptor, and
Tomcat enforces the rules defined here when processing your application's
<code>/WEB-INF/web.xml</code> file.  In particular, you <strong>must</strong>
enter your descriptor elements (such as <code>&lt;filter&gt;</code>,
<code>&lt;servlet&gt;</code>, and <code>&lt;servlet-mapping&gt;</code> in
the order defined by the DTD (see Section 13.3).</p>

</section>


<section name="Tomcat Context Descriptor">

<p>A /META-INF/context.xml file can be used to define Tomcat specific
configuration options, such as loggers, data sources, session manager
configuration and more. This XML file must contain one Context element, which
will be considered as if it was the child of the Host element corresponding
to the Host to which the  The Tomcat configuration documentation contains
information on the Context element.</p>

</section>


<section name="Deployment With Tomcat">

    <blockquote><em>
    <p>The description below uses the variable name $CATALINA_BASE to refer the
    base directory against which most relative paths are resolved. If you have
    not configured Tomcat for multiple instances by setting a CATALINA_BASE
    directory, then $CATALINA_BASE will be set to the value of $CATALINA_HOME,
    the directory into which you have installed Tomcat.</p>
    </em></blockquote>

<p>In order to be executed, a web application must be deployed on
a servlet container.  This is true even during development.
We will describe using Tomcat to provide the execution environment.
A web application can be deployed in Tomcat by one of the following
approaches:</p>
<ul>
<li><em>Copy unpacked directory hierarchy into a subdirectory in directory
    <code>$CATALINA_BASE/webapps/</code></em>.  Tomcat will assign a
    context path to your application based on the subdirectory name you
    choose.  We will use this technique in the <code>build.xml</code>
    file that we construct, because it is the quickest and easiest approach
    during development.  Be sure to restart Tomcat after installing or
    updating your application.
    <br/><br/></li>
<li><em>Copy the web application archive file into directory
    <code>$CATALINA_BASE/webapps/</code></em>.  When Tomcat is started, it will
    automatically expand the web application archive file into its unpacked
    form, and execute the application that way.  This approach would typically
    be used to install an additional application, provided by a third party
    vendor or by your internal development staff, into an existing
    Tomcat installation.  <strong>NOTE</strong> - If you use this approach,
    and wish to update your application later, you must both replace the
    web application archive file <strong>AND</strong> delete the expanded
    directory that Tomcat created, and then restart Tomcat, in order to reflect
    your changes.
    <br/><br/></li>
<li><em>Use the Tomcat "Manager" web application to deploy and undeploy
    web applications</em>.  Tomcat includes a web application, deployed
    by default on context path <code>/manager</code>, that allows you to
    deploy and undeploy applications on a running Tomcat server without
    restarting it.  See the administrator documentation (TODO: hyperlink)
    for more information on using the Manager web application.<br/><br/></li>
<li><em>Use "Manager" Ant Tasks In Your Build Script</em>.  Tomcat
    includes a set of custom task definitions for the <code>Ant</code>
    build tool that allow you to automate the execution of commands to the
    "Manager" web application.  These tasks are used in the Tomcat deployer.
    <br/><br/></li>
<li><em>Use the Tomcat Deployer</em>.  Tomcat includes a packaged tool
    bundling the Ant tasks, and can be used to automatically precompile JSPs
    which are part of the web application before deployment to the server.
    <br/><br/></li>
</ul>

<p>Deploying your app on other servlet containers will be specific to each
container, but all containers compatible with the Servlet API Specification
(version 2.2 or later) are required to accept a web application archive file.
Note that other containers are <strong>NOT</strong> required to accept an
unpacked directory structure (as Tomcat does), or to provide mechanisms for
shared library files, but these features are commonly available.</p>

</section>


</body>
</document>
