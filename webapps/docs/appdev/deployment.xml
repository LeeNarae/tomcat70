<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="deployment.html">

  &project;

  <properties>
    <author email="craigmcc@apache.org">크레이그 R. 맥클라나한</author>
    <title>배포</title>
  </properties>

<body>

<section name="컨텐트 테이블">
<toc/>
</section>

<section name="배경">

<p> 소스 코드 디렉토리를 어떻게 구조화시키는지 설명하기 전에, 
    웹 어플리케이션의 실행 구조를 검사하는 것은 매우 유용합니다.
    서블릿 버전 2.2 이전의 API 명세서에서는, 서버 플랫폼 간의 
    작은 일관성이 있었습니다. 그러나, 2.2(그 이후)를 따르는 
    명세서에서는 아래에 설명되어 있는 
    표준 형식의 <em>웹 어플리케이션 파일 목록</em>에 동의하는 
    것을 요구하고 있습니다.</p>

<p> 웹 어플리케이션은 표준 형식에 맞춰진 디렉토리및 파일의 계층 구조로 정의됩니다.
    이러한 계층구조는 파일시스템에 따로 따로 정의된 파일이나 디렉토리 같은 '압축'되지 
    않은 것이나, 웹 압축파일이나 WAR 파일같은 알려진 "압축"에 접근할 수 있습니다.
    The former format
    이전 형식은 개발할 때 좀 더 유리하며, 반면에 후자의 것은 
    당신의 어플리케이션을 설치하도록 하기 위해 배포할 때 유리합니다.
    </p>

<p> 당신의 웹 어플리케이션 계층에서 상위의 디렉토리는 웹 어플리케이션의 
    <em>document root</em>가 됩니다. 당신은 웹 어플리케이션의 유저 인터페이스를 
    구성하는 HTML 파일이나 JSP 파일을 넣게 될 것 입니다.  당신의 웹 어플리케이션 계층에서 상위의 디렉토리는 웹 어플리케이션의 
    <em>document root</em>가 됩니다. 당신은 웹 어플리케이션의 유저 인터페이스를 
    구성하는 HTML 파일이나 JSP 파일을 넣게 될 것 입니다.  시스템 관리자가 당신의 
    어플리케이션을 특별한 서버에 배포한다면, 그나 그들은 당신의 
    <em>context path</em>을 할당하게 됩니다.(다음 문단에서 톰캣에 배포하기 위한 메뉴얼이 정의되어 있습니다).   
    그러므로, 만약 시스템 관리자가 당신의 어플리케이션은 context path<code>/catalog</code>에 할당한다면, 
    <code>/catalog/index.html</code>를 참조한 요청 URI는
    document root에 있는 <code>index.html</code> 파일을 검색할 것 입니다..</p>

</section>


<section name="표준 디렉토리 형식">

<p> 필요한 형식의 웹 응용 프로그램 압축파일을 생성하는 것을 촉진시키기 위해서는 
    웹 어플리케이션의 "실행가능한" 파일을 준비하는 것이 편리합니다. (그것은 톰켓이 당신의 어플리케이션을 
    실행시킬 때 실제로 사용하는 파일입니다.) 같은 조직화가 WAR 포멧 자체를 위해서 요구됩니다.
    이렇게 하기 위해서는, 당신은 아래의 설명을 당신의 어플리케이션의 "Document root"에 끝내야 합니다.</p>
<ul>
<li><strong>*.html, *.jsp, etc.</strong> - HTML, JSP 그 외 
    파일(자바 스크립트, 스타일 시트 파일, 이미지)들은 당신의 
    어플리케이션을 위해 사용자의 브라우저에 반드시 보여져야 합니다.
    커다란 어플리케이션에서는 하위 디렉토리 구조에 그 파일들을 나누는 것을 선택할 수 있지만, 
    작은 앱에서는 주로 그 파일들을 하나의 디렉토리로 유지시키는 것이 훨씬 간단합니다.
    <br/><br/></li>
<li><strong>/WEB-INF/web.xml</strong> -  당신의 어플리케이션의 
    <em>웹 어플리케이션 배포 서술자</em>입니다.  이 XML파일은 당신 어플리케이션을 구성하는 
    서블릿과 다른 컴포넌트들과 당신의 서버에서 시행되기를 원하는 컨테이너 관리 보안 제약을 구성하고 있습니다..
    이 파일에 대해서 자세한 설명은 아래의 문단에서 설명하고 있습니다.
    <br/><br/></li>
<li><strong>/WEB-INF/classes/</strong> - 이 디렉토리는 당신의 어플리케이션에서 요구하는, 
    서블릿이나 서블리이 아닌, jar파일에 결합되어있지 않은 
    자바클래스 파일(또는 관계되어 있는 자원)을 포함하고 있습니다.  
    If your classes are organized into Java packages,
    만약 당신의 클래스들이 자바 패키지로 조직되어 있다면, 반드시 <code>/WEB-INF/classes/</code>아래의 
    디렉토리 구조에 이것을 반영해야 합니다.  예를 들어, <code>com.mycompany.mypackage.MyServlet</code>으로 
    이름이 지어진 자바 클래스는 <code>/WEB-INF/classes/com/mycompany/mypackage/MyServlet.class</code>와 같은 
    파일이름으로 저장되어져야 합니다.
    <br/><br/></li>
<li><strong>/WEB-INF/lib/</strong> - 이 디렉토리는 당신 어플리케이션에서 필요한, 서드 파티 클래스 라이브러리나 ]
    JDBC 드라이버 같은 자바 클래스 파일(또는 관련된 자원)을 
    가지고 있는 JAR 파일을 포함합니다.</li>
</ul>

<p> 톰캣(또는 다른 2.2/2.3 호환 서버) 안에 어플리케이션을 설치할 때, 클래스들은 <code>WEB-INF/classes/</code> 디렉토리 안에 
    있습니다. 뿐만 아니라 특정 웹 어플리케이션에서 다른 클래스에게 표시되는, JAR 파일안의 
    모든 클래스들은 <code>WEB-INF/lib/</code>에서 찾을 수 있습니다. 그러므로, 만약 당신이 이러한 위치중의 하나의 라이브러리 
    클래스를 모두 포함하는 경우, 
    (재배포 권리를 위해 당신이 활용했던 다른 서드 파티 라이브러리의 라이센스들을 체크해야 합니다.), 당신은 간단하게 
    웹 어플리케이션의 설치를 간단히 힐 수 있습니다. --
    시스템 클래스 패스 조정(또는 서버에 있는 전역 라이브러리 설치)이 필요없을 겁니다..</p>

<p> 여기의 대부분의 정보는 서블릿 버전 2.3 API 명세서에서 추출하였습니다. 
    더 많은 정보를 원하시면 그것을 보셔야 합니다.</p>

</section>


<section name="공유 라이브러리 파일">

<p> 대부분의 서블릿 컨네이너와 마찬가지로, 톰캣 또한 한번 
    JAR 파일 라이브러리(압축이 풀린 클래스) 설치, 그들을 모든 
    설치된 웹 어플리케이션에서 볼 수 있도록 하는(웹 어플리케이션 자체내에 포함되어 있지 않아도 됩니다.) 
    매커니즘을 제공하고 있습니다. 톰캣이 어떻게 그런 클래스들을 위치시키고 
    공유하는지에 대한 설명은 <a href="../class-loader-howto.html">Class Loader HOW-TO</a>에 자세하게 
    나와있습니다. 위치는 일반적으로 톰캣 설치에 사용된 
    공유코드 <strong>$CATALINA_HOME/lib</strong>이내로 사용됩니다.
    JAR 파일은 웹 어플리케이션과 톰캣 내부코드 둘이 볼 수 
    있는 위치에 있습니다. 여기는 당신의 웹 어플리케이션이나 
    톰캣 내부 두 곳에서 필요한 JDBC 드라이버를 놓기에 좋은 
    장소입니다,(JDBCRealm 같은).</p>

<p> 상자 밖에서, 표준 톰캣 설치는 다양한, 
    이전에 설치되어 공유되는 라이브러리 파일들을 포함하고 있습니다. 
    포함되는 것 들 입니다:</p>
<ul>
<li><em>Servlet 3.0</em>과 <em>JSP 2.1</em> API는 기본적으로 
    서블릿과 자바서버 페이지를 작성하는데 기초가 됩니다. <br/><br/></li>
<li><em>XML 파서</em>는 JAXP(1.2 버전) API와 호환됩니다. 즉 당신의 어플리케이션은
    DOM에 기초하거나 SAX에 기초한 XML 문서 처리를 수행할 수 있습니다.<br/><br/></li>
</ul>

</section>


<section name="웹 어플리케이션 배포 서술자">

<p> 위에서 언급한, <code>/WEB-INF/web.xml</code> 파일은 당신의 어플리케이션을 
    위한 웹 어플리케이션 배포 서술자를 포함하고 있습니다.  파일 확장자에서 
    알 수 있듯이, 이 파일은 XML문서이며, 당신의 어플리케이션에 대해 
    서버가 알아야 할 모든 것이 정의되어 있습니다. (<em>context path</em> 예외,
    그것은 시스템 관리자가 배포할 때 정의합니다.).</p>

<p> 배포 기술자의 완벽한 문법과 의미는 서블릿 API 버전 2.3 정의서의 
    챕터13에 정의되어 있습니다. 시간이 프르면, 개발툴이 당신을 위해서 
    배포 서술자를 생성하고 편집하는 기능을 제공할 것이라고 예상이 됩니다.그동안은, 출발 지점을 제공하기 위해,
    <a href="web.xml.txt" target="_new">basic web.xml 파일</a>가 제공됩니다.
    이 파일은 각각의 요소들의 목적을 설명하는 주석을 포함하고 있습니다.</p>

<p> <strong>NOTE</strong> - 서블릿 명세서는 웹 어플리케이션 배포 서술자와 
    톰캣이 당신의 어플리케이션의 <code>/WEB-INF/web.xml</code> 파일을 
    처리할 때 시행할 정책을 위한 문서 타입 서술자(Document Type Descriptor, DTD)를 
    포함하고 있습니다.  특별한 경우, 당신은 배포자 요소(<code>&lt;필터&gt;</code>,
    <code>&lt;서블릿&gt;</code>, and <code>&lt;서블릿-매핑&gt;</code> 같은 것들)을 
    DTD에 정의된 순서대로(구문 13.3을 보세요.) 입력해야만 합니다.</p>

</section>


<section name="Tomcat Context Descriptor">

<p>A /META-INF/context.xml file can be used to define Tomcat specific
configuration options, such as loggers, data sources, session manager
configuration and more. This XML file must contain one Context element, which
will be considered as if it was the child of the Host element corresponding
to the Host to which the  The Tomcat configuration documentation contains
information on the Context element.</p>

</section>


<section name="톰캣과 함께 배포">

    <blockquote><em>
    <p> 아래의 설명에 사용된 변수 이름 $CATALINA_BASE는 
        대부분의 상대경로가 해결되는 데 대한 기본 디렉토리를
        참조합니다. 만약 여러개의 톰캣을 위해 CATALINA_BASE 디렉토리를 
        설정을 구성한 적이 없다면, $CATALINA_BASE의 값은 당신이 톰캣을 
        설치했던 디렉도리로 설정이 될 것 입니다.</p>
    </em></blockquote>

<p> 실행하기 위해서, 웹 어플리케이션은 
    서블릿 컨테이너에 배포되어야만 합니다.  개발되는 동안에도 마찬가지 입니다.
    우리는 톰캣을 이용하여 개발 환경을 제공하는 것을 설명할 것 입니다.
    웹 어플리케이션은 다음 방법 중 하나를 통해 톰캣에서 배포될 수 있습니다.:</p>
<ul>
<li><em>Copy unpacked directory hierarchy into a subdirectory in directory
    <code>$CATALINA_BASE/webapps/</code></em>.  Tomcat will assign a
    context path to your application based on the subdirectory name you
    choose.  We will use this technique in the <code>build.xml</code>
    file that we construct, because it is the quickest and easiest approach
    during development.  Be sure to restart Tomcat after installing or
    updating your application.
    <br/><br/></li>
<li><em>Copy the web application archive file into directory
    <code>$CATALINA_BASE/webapps/</code></em>.  When Tomcat is started, it will
    automatically expand the web application archive file into its unpacked
    form, and execute the application that way.  This approach would typically
    be used to install an additional application, provided by a third party
    vendor or by your internal development staff, into an existing
    Tomcat installation.  <strong>NOTE</strong> - If you use this approach,
    and wish to update your application later, you must both replace the
    web application archive file <strong>AND</strong> delete the expanded
    directory that Tomcat created, and then restart Tomcat, in order to reflect
    your changes.
    <br/><br/></li>
<li><em>Use the Tomcat "Manager" web application to deploy and undeploy
    web applications</em>.  Tomcat includes a web application, deployed
    by default on context path <code>/manager</code>, that allows you to
    deploy and undeploy applications on a running Tomcat server without
    restarting it.  See the administrator documentation (TODO: hyperlink)
    for more information on using the Manager web application.<br/><br/></li>
<li><em>Use "Manager" Ant Tasks In Your Build Script</em>.  Tomcat
    includes a set of custom task definitions for the <code>Ant</code>
    build tool that allow you to automate the execution of commands to the
    "Manager" web application.  These tasks are used in the Tomcat deployer.
    <br/><br/></li>
<li><em>Use the Tomcat Deployer</em>.  Tomcat includes a packaged tool
    bundling the Ant tasks, and can be used to automatically precompile JSPs
    which are part of the web application before deployment to the server.
    <br/><br/></li>
</ul>

<p>Deploying your app on other servlet containers will be specific to each
container, but all containers compatible with the Servlet API Specification
(version 2.2 or later) are required to accept a web application archive file.
Note that other containers are <strong>NOT</strong> required to accept an
unpacked directory structure (as Tomcat does), or to provide mechanisms for
shared library files, but these features are commonly available.</p>

</section>


</body>
</document>
