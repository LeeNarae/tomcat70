<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="deployer-howto.html">

    &project;

    <properties>
        <author>알리스테어 크로슬리</author>
        <title>톰캣 웹 애플리케이션 배치</title>
    </properties>

<body>

<section name="Table of Contents">
<toc/>
</section>

    <section name="Introduction">
        <p>
            배치는 웹 애플리케이션(써드 파티 WAR 또는 직접 만든 웹 애플리케이션 모두 해당)을 
            톰캣 서버에 설치하는 절차를 위한 용어입니다.
        </p>
        <p>
            웹 애플리케이션 배치는 여러 가지 방법으로 톰캣 서버에서 가능합니다.</p>
        <ul>
                <li>정적으로; 웹 애플리케이션은 톰캣이 시작하기 전에 설치됩니다.</li>
                <li>
                    동적으로; 톰캣 매니저 웹 애플리케이션을 통해서나 이미 배치된 웹 애플리케이션을
                    조작해서 가능합니다.
                </li>
        </ul>
        <p>
            톰캣 매니저는 URL기반 웹 애플리케이션 배치 기능이 있는 도구입니다. 클라이언트 배치자라는
            도구가 있어서 명령 쉘 기반의 스크립트로 톰캣 매니저를 제어하고, 웹 애플리케이션의 컴파일과 
            검증, 웹 애플리케이션을 WAR(웹 애플리케이션 자원; Web Application Resource) 파일로 
            패키징하는 작업같은 추가 기능이 제공됩니다.
        </p>
    </section>

    <section name="Installation">
        <p>
            웹 애플리케이션의 정적인 배치에는 톰캣의 기본 제공 기능이기 때문에 설치가 필요하지 않습니다.
            톰캣 매니저 매뉴얼에 상세 설명된 설정이 필요한 경우도 있지만, 설치를 위해서 톰캣 매니저로 
            배치 기능을 사용하지 않아도 됩니다. 하지만 톰캣 클라이언트 배치자(TCD)를 사용하려면 
            설치가 필요합니다.
        </p>
        <p>
            TCD는 톰캣 코어 배포판에 패키징되어 있지 않아서, 다운로드 페이지에서 
            따로 다운로드 받아야 합니다. 다운로드 명칭은 보통 
            <i>apache-tomcat-7.0.x-deployer</i> 입니다.
        </p>
        <p>
            TCD는 아파치 앤드 1.6.2 버전 이상 그리고 자바 설치가 되어있어야 합니다.
            여러분의 환경은 ANT_HOME 환경변수가 앤트 설치된 경로를 가르키는 값으로 정의되어
            있어야 하고, JAVA_HOME 환경변수는 자바가 설치된 곳을 가르키고 있어야 합니다.
            덧붙여서, 앤트의 ant 명령, 자바의 javac 컴파일러 명령이 운영체제가 제공하는
            명령어 쉘에서 실행할 수 있어야 합니다.
        </p>
        <ol>
            <li>TCD 배포판 다운로드하기</li>
            <li>
                TCD 패키지는 기존 설치된 톰캣에 설치되지 않아도 되기 때문에, 어느 경로에든
                압축이 풀려있으면 됩니다.
            </li>
            <li><a href="#Deploying using the Client Deployer Package">
            톰캣 클라이언트 배치자</a> 사용하는 방법을 읽어보세요.</li>
        </ol>
    </section>

    <section name="A word on Contexts">
        <p>
            In talking about deployment of web applications, the concept of a
            <i>Context</i> is required to be understood. A Context is what Tomcat
            calls a web application.
        </p>
        <p>
            In order to configure a Context within Tomcat a <i>Context Descriptor</i>
            is required. A Context Descriptor is simply an XML file that contains
            Tomcat related configuration for a Context, e.g naming resources or
            session manager configuration. In earlier versions of
            Tomcat the content of a Context Descriptor configuration was often stored within
            Tomcat's primary configuration file <i>server.xml</i> but this is now
            discouraged (although it currently still works).
        </p>
        <p>
            Context Descriptors not only help Tomcat to know how to configure
            Contexts but other tools such as the Tomcat Manager and TCD often use
            these Context Descriptors to perform their roles properly.
        </p>
        <p>
            The locations for Context Descriptors are:
        </p>
        <ol>
                <li>$CATALINA_BASE/conf/[enginename]/[hostname]/context.xml</li>
                <li>$CATALINA_BASE/webapps/[webappname]/META-INF/context.xml</li>
        </ol>
        <p>
            Files in (1) are named [webappname].xml but files in (2) are named
            context.xml. If a Context Descriptor is not provided for a Context,
            Tomcat configures the Context using default values.
        </p>
    </section>

    <section name="Deployment on Tomcat startup">
        <p>
            If you are not interested in using the Tomcat Manager, or TCD,
            then you'll need to deploy your web applications
            statically to Tomcat, followed by a Tomcat startup. The location you
            deploy web applications to for this type of deployment is called the
            <code>appBase</code> which is specified per Host. You either copy a
            so-called <i>exploded web application</i>, i.e non-compressed, to this
            location, or a compressed web application resource .WAR file.
        </p>
        <p>
            The web applications present in the location specified by the Host's
            (default Host is "localhost") <code>appBase</code> attribute (default
            appBase is "$CATALINA_BASE/webapps") will be deployed on Tomcat startup
            only if the Host's <code>deployOnStartup</code> attribute is "true".
        </p>
        <p>
            The following deployment sequence will occur on Tomcat startup in that
            case:
        </p>
        <ol>
            <li>Any Context Descriptors will be deployed first.</li>
            <li>
                Exploded web applications not referenced by any Context
                Descriptor will then be deployed. If they have an associated
                .WAR file in the appBase and it is newer than the exploded web application,
                the exploded directory will be removed and the webapp will be
                redeployed from the .WAR
            </li>
            <li>.WAR files will be deployed</li>
        </ol>
        <p>
            Note again that for each deployed web application, a
            Context Descriptor will be created <i>unless one exists already</i>.
        </p>
    </section>

    <section name="Deploying on a running Tomcat server">
        <p>
            It is possible to deploy web applications to a running Tomcat server.
        </p>
        <p>
            If the Host <code>autoDeploy</code> attribute is "true", the Host will
            attempt to deploy and update web applications dynamically, as needed,
            for example if a new .WAR is dropped into the <code>appBase</code>.
            For this to work, the Host needs to have background processing
            enabled which is the default configuration.
        </p>

        <p>
            <code>autoDeploy</code> set to "true" and a running Tomcat allows for:
        </p>
        <ul>
            <li>Deployment of .WAR files copied into the Host <code>appBase</code>.</li>
            <li>
                Deployment of exploded web applications which are
                copied into the Host <code>appBase</code>.
            </li>
            <li>
                Re-deployment of a web application which has already been deployed from
                a .WAR when the new .WAR is provided. In this case the exploded
                web application is removed, and the .WAR is expanded again.
                Note that the explosion will not occur if the Host is configured
                so that .WARs are not exploded with a <code>unpackWARs</code>
                attribute set to "false", in which case the web application
                will be simply redeployed as a compressed archive.
            </li>
            <li>
                Re-loading of a web application if the /WEB-INF/web.xml file (or
                any other resource defined as a WatchedResource) is updated.
            </li>
            <li>
                Re-deployment of a web application if the Context Descriptor
                file from which the web application has been deployed is
                updated.
            </li>
            <li>
                Re-deployment of dependent web applications if the global or
                per-host Context Descriptor file used by the web application is
                updated.
            </li>
            <li>
                Re-deployment of a web application if a Context Descriptor file (with a
                filename corresponding to the Context path of the previously deployed
                web application) is added to the
                <code>$CATALINA_BASE/conf/[enginename]/[hostname]/</code>
                directory.
            </li>
            <li>
                Undeployment of a web application if its document base (docBase)
                is deleted. Note that on Windows, this assumes that anti-locking
                features (see Context configuration) are enabled, otherwise it is not
                possible to delete the resources of a running web application.
            </li>
        </ul>
        <p>
            Note that web application reloading can also be configured in the loader, in which
            case loaded classes will be tracked for changes.
        </p>
    </section>

    <section name="Deploying using the Tomcat Manager">
        <p>
            The Tomcat Manager is covered in its <a href="manager-howto.html">own manual page</a>.
        </p>
    </section>

    <section name="Deploying using the Client Deployer Package">
        <p>
            Finally, deployment of web application may be achieved using the
            Tomcat Client Deployer. This is a package which can be used to
            validate, compile, compress to .WAR, and deploy web applications to
            production or development Tomcat servers. It should be noted that this feature
            uses the Tomcat Manager and as such the target Tomcat server should be
            running.
        </p>

        <p>
            It is assumed the user will be familiar with Apache Ant for using the TCD.
            Apache Ant is a scripted build tool. The TCD comes pre-packaged with a
            build script to use. Only a modest understanding of Apache Ant is
            required (installation as listed earlier in this page, and familiarity
            with using the operating system command shell and configuring
            environment variables).
        </p>

        <p>
            The TCD includes Ant tasks, the Jasper page compiler for JSP compilation
            before deployment, as well as a task which
            validates the web application Context Descriptor. The validator task (class
            <code>org.apache.catalina.ant.ValidatorTask</code>) allows only one parameter:
            the base path of an exploded web application.
        </p>

        <p>
            The TCD uses an exploded web application as input (see the list of the
            properties used below). A web application that is programmatically
            deployed with the deployer may include a Context Descriptor in
            <code>/META-INF/context.xml</code>.
        </p>

        <p>
            The TCD includes a ready-to-use Ant script, with the following targets:
        </p>
        <ul>
            <li>
                <code>compile</code> (default): Compile and validate the web
                application. This can be used standalone, and does not need a running
                Tomcat server. The compiled application will only run on the associated
                Tomcat 7.0.x server release, and is not guaranteed to work on another
                Tomcat release, as the code generated by Jasper depends on its runtime
                component. It should also be noted that this target will also compile
                automatically any Java source file located in the
                <code>/WEB-INF/classes</code> folder of the web application.</li>
            <li>
                <code>deploy</code>: Deploy a web application (compiled or not) to
                a Tomcat server.
            </li>
            <li><code>undeploy</code>: Undeploy a web application</li>
            <li><code>start</code>: Start web application</li>
            <li><code>reload</code>: Reload web application</li>
            <li><code>stop</code>: Stop web application</li>
        </ul>

        <p>
            In order for the deployment to be configured, create a file
            called <code>deployer.properties</code> in the TCD installation
            directory root. In this file, add the following name=value pairs per
            line:
        </p>

        <p>
            Additionally, you will need to ensure that a user has been
            setup for the target Tomcat Manager (which TCD uses) otherwise the TCD
            will not authenticate with the Tomcat Manager and the deployment will
            fail. To do this, see the Tomcat Manager page.
        </p>

        <ul>
            <li>
                <code>build</code>: The build folder used will be, by default,
                <code>${build}/webapp/${path}</code>. After the end of the execution
                of the <code>compile</code> target, the web application .WAR will be
                located at <code>${build}/webapp/${path}.war</code>.
            </li>
            <li>
                <code>webapp</code>: The directory containing the exploded web application
                which will be compiled and validated. By default, the folder is
                <code>myapp</code>.
            </li>
            <li>
                <code>path</code>: Deployed context path of the web application,
                by default <code>/myapp</code>.
            </li>
            <li>
                <code>url</code>: Absolute URL to the Tomcat Manager web application of a
                running Tomcat server, which will be used to deploy and undeploy the
                web application. By default, the deployer will attempt to access
                a Tomcat instance running on localhost, at
                <code>http://localhost:8080/manager/text</code>.
            </li>
            <li>
                <code>username</code>: Tomcat Manager username (user should have a role of
                manager-script)
            </li>
            <li><code>password</code>: Tomcat Manager password.</li>
        </ul>
    </section>

</body>

</document>
