<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document url="proxy-howto.html">

    &project;

    <properties>
        <author email="craigmcc@apache.org">Craig R. McClanahan</author>
        <title>Proxy가 어떤 것을 제공하는 지</title>
    </properties>

<body>

<section name="Table of Contents">
<toc/>
</section>

<section name="Introduction">

<p>톰캣의 표준 구성을 사용하여, 서버 이름과 포트 번호 요청 처리에 대한 응용 프로그램을 요청할 수 있다.  톰캣은 독립적으로 실행된다.
<a href="config/coyote.html">Coyote HTTP/1.1 Connector</a>, 일반적인 요청으로 지정된 서버 이름 및 커넥터가 수신하는 포트 번호를 입력 받을 때 servlet API는 아래와 같은 목적을 위해 호출 된다.</p>
<ul>
<li><code>ServletRequest.getServerName()</code>: 서버의 호스트 네임을 반환.</li>
<li><code>ServletRequest.getServerPort()</code>: 서버의 호스트 네임을 반환.</li>
<li><code>ServletRequest.getLocalName()</code>: 수신 된 IP의 인터페이스를 반환.</li>
<li><code>ServletRequest.getLocalPort()</code>: 수신 된 IP의 인터페이스를 반환.</li>
</ul>

<p> 당신이 프록시 서버 뒤에 실행하는 경우(또는 프록시 서버처럼 동작되는 웹 서버), 이러한 호출에 의해 반환 된 값을 관리하는 것을 수월하게 할 수 있다.  특히, 커넥터 자체의 것이 아닌 일반적인 요청에 반영할 수 있도록 포트 번호를 얻을 수 있다. ProxyName와 ProxyPort 속성을 사용할 수 있다.</p>

<p>Proxy는 다양한 형태를 제공한다.  몇가지 일반적인 프록시 구성을 다음 섹션에서 설명하도록 한다.</p>

</section>

<section name="Apache 1.3 Proxy Support">

<p>Apache 1.3는 웹 서버가 프록시 서버로 작동하도록 옵션 모듈을 제공한다. 톰캣 함수에 특정 웹 응용 프로그램에 대해 같은 웹 커넥터를 구성할 필요없이, 이 요청을 전달하는데 사용할 수 있다. 
이 작업을 수행하려면 다음과 같은 작업을 수행하여야 한다.</p>
<ol>
<li>모듈을 포함할 수 있도록 아파치의 복사본을 구성한다.  소스를 만들 경우 가장 쉬운 방법은 지시문을 포함하는 것이다.</li>
<li>추가하지 않을 경우, 다음과 같은 소스를 사용하여 아파치 시작 모듈을 로드되어 있는지 확인하여야 한다.<code>httpd.conf</code> file:
<source>
LoadModule proxy_module  {path-to-modules}/mod_proxy.so
AddModule  mod_proxy.c
</source></li>
<li>  예를 들어 문맥 경로에 응용프로그램을 전달하는 경우에는 Tomcat에 전달하고자 하는 각 응용 프로그램의 파일에서 두 개의 지시문을 더한다. <code>/myapp</code>:
<source>
ProxyPass         /myapp  http://localhost:8081/myapp
ProxyPassReverse  /myapp  http://localhost:8081/myapp
</source>
    Tomcat 커넥터가 포트 8081에서 수신할 수 있도록 아파치에 다가 URL을 알려준다 .</li>
<li>적절한 프록시 설정을 통해 특별한 속성을 같는 Tomcat의 복사본을 구성한다. 예를 들어:
<source>
&lt;Connector port="8081" ...
              proxyName="www.mycompany.com"
              proxyPort="80"/&gt;
</source>
    이 어플리캐이션 내에서 서블릿은 포트 80에 모든 프록시 요청을 한다.</li>
<li> proxyName 속성을 생략할 수 있다.  만약 Tomcat이 실행되고 있으면 주소는 반환될 수 있다.  위의 예시는 로컬 호스트를 나타낸다.</code>.</li>
<li>포트 8080에서 수신 커넥터가 있는 경우 (중첩되는 속성), 포트에 가상 주소 및 어플리케이션을 공유한다.</li>
<li>포트 8081에 연결을 제한하는 운영체제 IP필터링 기능을 사용하려면  오직 아파치 서버에서만 실행하여야 한다.</li>
<li>다음과 같이, 프록시를 통해서 에플리케이션 종류를 설정할 수 있다  
    <ul>
    <li> 프록시 포트를 위한 전용 커넥터를 포함하는 다른 종류로 구성된다.</li>
    <li>적절한 주소 구성<a href="config/engine.html">Engine</a>,
        <a href="config/host.html"></a>, 그리고
        <a href="config/context.html">문맥</a> 프록시를 통해 액세스 할 수 있는 가상 주소 및 어플리케이션을 구성해야 한다.</li>
    <li>앞에서 설명한대로 IP필터와 포트8081을 선택하라.</li>
    </ul></li>
<li>아파치에서 프록시를 요청할 경우, 웹 서버는 액세스 로그에 이 요청을 기록한다.  따라서 Tomcat이 자체적으로 액세스를 해제한다.</li>
</ol>

<p>프록시 방법이 요청이 있을 경우, <strong>all</strong> 구성된 어플리케이션에 대한 요청은 Tomcat에서 처리된다. (정적 콘텐츠에 대한 요청 포함).  아래와 같은 것을 사용하여 성능을 향상시킬 수 있다.
<code>mod_jk</code> 웹 커넥터 대신 proxy 모드를 통해, 웹 서버가 어플리케이션의 배포자를 통해 구성된 정적 콘텐츠를 처리할 수 있도록 제공해 준다.
(<code>/WEB-INF/web.xml</code>).</p>

</section>

<section name="Apache 2.0 Proxy Support">
같은 방법을 쓸 수 있는 1.3이 있다. (Apache 2.0에서 생략할 수 있다.<code>AddModule  mod_proxy.c</code>)
</section>

</body>

</document>

