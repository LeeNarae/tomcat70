<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="executor.html">

  &project;

  <properties>
    <author email="fhanik@apache.org">Filip Hanik</author>
    <title>집행자 (스레드 풀)</title>
  </properties>

<body>

<section name="Table of Contents">
<toc/>
</section>

<section name="Introduction">

  <p>The <strong>Executor</strong> represents a thread pool that can be shared
     between components in Tomcat. Historically there has been a thread pool per
     connector created but this allows you to share a thread pool, between (primarly) connector
     but also other components when those get configured to support executors</p>

	 집행자는 톰캣의 컴포넌트간에 공유할 수있는 스레드 풀을 나타냅니다.
     역사적으로 거기에 만들어진 커넥터 당 스레드 풀이지만, 이것이 이들이 Executors를 지원하도록 
	 구성되어받을 (primarly) 커넥터뿐만 아니라, 다른 구성 요소 사이에 스레드 풀을 공유할 수있다.


  <p>The executor has to implement the <code>org.apache.catalina.Executor</code> interface.</p>

     집행자는 org.apache.catalina.Executor 인터페이스를 구현해야한다.

  <p>The executor is a nested element to the <a href="service.html">Service</a> element.
     And in order for it to be picked up by the connectors, the Executor element has to appear
     prior to the Connector element in server.xml</p>

	집행자는 서비스 요소에 중첩된 요소입니다.
    그리고 그것이 커넥터에 의해 포착되어 있어야 위해 집행자 요소는 
    앞서 server.xml에있는 커넥터 요소에 표시해야한다.


</section>


<section name="Attributes">

  <subsection name="Common Attributes">

  <p>All implementations of <strong>Executor</strong>
  support the following attributes:</p>

  집행자의 모든 구현은 다음 특성을 지원합니다


  <attributes>

    <attribute name="className" required="false">
      <p>The class of the implementation. The implementation has to implement the
         <code>org.apache.catalina.Executor</code> interface.
         This interface ensures that the object can be referenced through its <code>name</code> attribute
         and that implements Lifecycle, so that it can be started and stopped with the container.
         The default value for the className is <code>org.apache.catalina.core.StandardThreadExecutor</code></p>

   구현 클래스.
   구현은 org.apache.catalina.Executor 인터페이스를 구현해야한다.
   이 인터페이스는 개체의 이름 속성을 통해 참조될, 그것은 시작과 컨테이너로 막을 수 있도록 
   라이프 사이클을 구현 할 수있게 해줍니다.
   
   클래스에 대한 기본값은 org.apache.catalina.core입니다.
   
   표준 스레드 집행자

    </attribute>

    <attribute name="name" required="true">
      <p>The name used to reference this pool in other places in server.xml.
         The name is required and must be unique.</p>

   이름은 server.xml에있는 다른 장소에서이 수영장을 참조할 때 사용.
   이름이 필요하며 고유해야합니다.

    </attribute>

  </attributes>

  </subsection>

  <subsection name="Standard Implementation">

  <p>
  The default implementation supports the following attributes:</p>
  기본 구현은 다음과 같은 특성을 지원합니다.


  <attributes>

    <attribute name="threadPriority" required="false">
      <p>(int) The thread priority for threads in the executor, the default is <code>Thread.NORM_PRIORITY</code></p>
	  (INT) 집행자의 스레드에 대한 스레드 우선순위는 기본값 Thread.NORM_PRIORITY입니다

    </attribute>
    <attribute name="daemon" required="false">
      <p>(boolean) Whether the threads should be daemon threads or not, the default is <code>true</code></p>
	  (부울) 스레드가 데몬 스레드가 아닌지 여부, 기본값은 사실이다
	
	</attribute>
    <attribute name="namePrefix" required="false">
      <p>(String) The name prefix for each thread created by the executor.
         The thread name for an individual thread will be <code>namePrefix+threadNumber</code></p>

     (문자열) 집행자가 만든 각 스레드에 대해 이름 접두어.
	 
	  개별 스레드에 대한 스레드 이름은 namePrefix + threadNumber 될 것입니다

    </attribute>
    <attribute name="maxThreads" required="false">
      <p>(int) The max number of active threads in this pool, default is <code>200</code></p>

     (INT)이 풀에있는 활성 스레드의 최대 개수가 기본값은 200 개입니다.
	
	</attribute>
    <attribute name="minSpareThreads" required="false">
      <p>(int) The minimum number of threads always kept alive, default is <code>25</code></p>

     (INT) 스레드의 최소 개수는 항상 살아 보관, 기본값은 25입니다.

    </attribute>
    <attribute name="maxIdleTime" required="false">
      <p>(int) The number of milliseconds before an idle thread shutsdown, unless the number of active threads are less or equal to minSpareThreads. Default value is <code>60000</code>(1 minute)</p>

    유휴 스레드 shutsdown 전에 밀리초 (INT) 번호, 활성 스레드의 수가 작거나 minSpareThreads 같음가 아닌 경우.
    기본값은 60,000 (1 분)입니다

    </attribute>
    <attribute name="maxQueueSize" required="false">
      <p>(int) The maximum number of runnable tasks that can queue up awaiting
        execution before we reject them. Default value is <code>Integer.MAX_VALUE</code></p>

	우리가 그들을 거부하기 전에 대기열가 실행을 기다리는 수 runnable 작업 (INT) 최대 수입니다.
    기본값은 Integer.MAX_VALUE이다.

	</attribute>
    <attribute name="prestartminSpareThreads" required="false">
      <p>(boolean) Whether minSpareThreads should be started when starting the Executor or not,
          the default is <code>false</code></p>

    집행자 여부를 시작할 때> (부울) minSpareThreads가 시작할지 여부, 기본값은 false입니다.

    </attribute>
    <attribute name="threadRenewalDelay" required="false">
      <p>After a context is stopped, threads in the pool are renewed. To avoid renewing all threads at the same time,
        this delay is observed between 2 threads being renewed. Value is in ms, default value is 1000ms.
        If negative, threads are not renewed.</p>

    컨텍스트가 중지되면 풀에 스레드가 갱신됩니다. 동시에 모든 스레드를 갱신하지 않도록하려면이 지연이 
	갱신되는 두 스레드 사이에 관찰된다. 가치는 MS에, 기본값은 1000ms입니다.

	부정적인면, 스레드가 갱신되지 않습니다.
    </attribute>
  </attributes>


  </subsection>
</section>


</body>

</document>